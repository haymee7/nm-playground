<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.zzimcar.dao.BlogDao">
    <insert id="save" parameterType="BlogDto">
        INSERT
        playground.blog (
      title, post, writer
    ) VALUES (
        #{title}, #{post}, #{writer}
        )
        WHERE deleted_at IS NULL
    </insert>

    <select id="retrieveOne" parameterType="int" resultType="BlogDto">
        SELECT title,
               post,
               writer,
               pid,
               created_at
        FROM playground.blog
        WHERE deleted_at IS NULL
          AND pid = #{pid}
    </select>
    <select id="retrieve" parameterType="BlogsReqDto" resultType="BlogResDto">
        SELECT title,
               post,
               writer,
               pid,
               created_at
        FROM playground.blog LIMIT #{sp}, #{cnt}
    </select>

    <select id="totalCnt" resultType="int">
        SELECT COUNT(*)
        FROM playground.blog
    </select>

    <select id="retriveList" parameterType="map" resultType="BlogDto">
        SELECT
        b.title, b.post, b.writer, b.pid, b.created_at
        FROM
        playground.blog b
        WHERE
        deleted_at IS NULL
        <if test='sort.equals("D")'>
            ORDER BY b.pid DESC
        </if>
        <if test='sort.equals("A")'>
            ORDER BY b.pid ASC
        </if>
        LIMIT
        #{sp}, #{cnt}
    </select>

    <update id="revice" parameterType="BlogDto">
        UPDATE playground.blog
        SET TITLE  = #{title},
            POST   = #{post},
            WRITER = #{writer}
        WHERE deleted_at IS NULL
          AND PID = #{pid}
    </update>

    <delete id="delete" parameterType="int">
        DELETE
        FROM playground.blog
        WHERE deleted_at IS NULL
          AND pid = #{pid};
    </delete>
</mapper>